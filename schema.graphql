type Identity @entity {
    id: ID!
    address: String!
    displayName: String
    legalName: String
    email: String
    riot: String
    image: String
    twitter: String

    createdBodies: [Body!]! @derivedFrom(field: "creatorIdentity")
    controllerBodies: [Body!]! @derivedFrom(field: "controllerIdentity")
    bodyMembers: [BodyMember!]! @derivedFrom(field: "identity")

    createdCampaigns: [Campaign!]! @derivedFrom(field: "creatorIdentity")
    campaignContributors: [CampaignContributor!]! @derivedFrom(field: "identity")

    createdProposals: [Proposal!]! @derivedFrom(field: "creatorIdentity")
    proposalVoters: [ProposalVoter!]! @derivedFrom(field: "identity")
}

type Body @entity {
    id: ID!
    creator: String!
    creatorIdentity: Identity!
    controller: String!
    controllerIdentity: Identity!
    treasury: String!
    treasuryIdentity: Identity!
    cid: String!
    body: Int!
    access: Int!
    feeModel: Int!
    fee: BigInt!
    govAsset: Int!
    payAsset: Int!
    memberLimit: BigInt!
    metadata: BodyMetadata!
    members: [BodyMember!] @derivedFrom(field: "body")
    campaigns: [Campaign!]! @derivedFrom(field: "body")
}

type BodyMetadata @entity {
    id: ID!
    name: String!
    description: String!
    website: String!
    email: String!
    repo: String!
    logo: String!
}

type BodyMember @entity {
    id: ID!
    body: Body!
    address: String!
    identity: Identity!
}

enum CampaignState {
    Funding,
    Failed,
    Funded,
}

type Campaign @entity {
    id: ID!
    body: Body!
    creator: String!
    creatorIdentity: Identity!
    admin: String!
    adminIdentity: Identity!
    target: BigInt!
    deposit: BigInt!
    expiry: Int!
    protocol: Int!
    governance: Int!
    cid: String!
    tokenSymbol: String!
    tokenName: String!

    state: CampaignState!

    metadata: CampaignMetadata!
    contributors: [CampaignContributor]! @derivedFrom(field: "campaign")
}

type CampaignMetadata @entity {
    id: ID!
    name: String!
    email: String!
    title: String!
    description: String!
    markdown: String!
    logo: String!
    header: String!
}

type CampaignContributor @entity {
    id: ID!
    campaign: Campaign!

    address: String!
    identity: Identity!

    contributed: BigInt!
}

type Proposal @entity {
    id: ID!
    body: Body!
    campaign: Campaign

    creator: String!
    creatorIdentity: Identity!

    cid: String!

    type: Int!
    data: ProposalTypeData!

    state: ProposalState!

    # ToDo: how to save collateral and is it enough to have "approvers" and "deniers"? (For later, currently we only support simple votes)
    # Maybe just make an union like ProposalTypeData (Data abstraction to different types)
    votingType: Int!
    approvers: BigInt!
    deniers: BigInt!

    voters: [ProposalVoter!]! @derivedFrom(field: "proposal")

    expiryBlock: Int!
}

type ProposalVoter @entity {
    id: ID!
    proposal: Proposal!

    address: String!
    identity: Identity!

    voted: BigInt!
}

enum ProposalState {
    Voting,
    Expired,
    Rejected,
    Approved,
}

type ProposalTypeGeneralData {
    type: Int!
}

type ProposalTypeWithdrawalData {
    type: Int!
    amount: BigInt!
}

union ProposalTypeData = ProposalTypeGeneralData | ProposalTypeWithdrawalData
